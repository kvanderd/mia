// Generated by CoffeeScript 1.6.3
var Card, CardView, Deck, Guess, Round,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Deck = (function() {
  function Deck(ids, length, counter) {
    this.ids = ids;
    this.length = length;
    this.counter = counter;
  }

  return Deck;

})();

Card = (function() {
  function Card(answer, hint, id, question1) {
    this.answer = answer;
    this.hint = hint;
    this.id = id;
    this.question1 = question1;
  }

  return Card;

})();

Guess = (function() {
  function Guess(answer, cardId) {
    this.answer = answer;
    this.cardId = cardId;
    this.save = __bind(this.save, this);
    this.answer = Number(this.answer);
    this.cardId = Number(this.cardId);
  }

  Guess.prototype.save = function() {
    return $.ajax("/rounds/guesses", {
      method: "POST",
      data: {
        guess: this.answer,
        card_id: this.cardId,
        dataType: "text"
      }
    });
  };

  return Guess;

})();

Round = (function() {
  function Round(cardView) {
    this.cardView = cardView;
  }

  Round.prototype.getCard = function(cardId, deck) {
    var self;
    console.log(cardId);
    if (Number(deck.length) === Number(deck.counter)) {
      return window.location.href = "/rounds";
    } else {
      self = this;
      deck.counter++;
      return $.ajax("/rounds/guesses/get_card", {
        method: "GET",
        data: "cardId=" + cardId,
        success: function(data) {
          return self.dealCard(new Card(data.answer, data.hint, data.id, data.question1));
        },
        error: function() {
          return alert("Oups, something went wrong");
        }
      });
    }
  };

  Round.prototype.dealCard = function(card) {
    this.cardView.setCard(card);
    $("#guess_card_id").append().val(card.id);
    return $(".hint").append(card.hint);
  };

  Round.prototype.collectCard = function() {
    $(".is_correct").show();
    $(".is_correct, .hint").empty();
    $("#guess_answer").val(" ");
    return $(".response").val(" ");
  };

  Round.prototype.showAnswer = function(answer) {
    $(".hint").addClass("hide");
    return $(".is_correct").append(answer).delay(1500).fadeOut("slow", function() {
      return $('.card').removeClass('flipped');
    });
  };

  return Round;

})();

CardView = (function() {
  function CardView(element) {
    this.element = element;
    this.dom = __bind(this.dom, this);
  }

  CardView.prototype.dom = function(selector) {
    return $(this.element).find(selector);
  };

  CardView.prototype.setCard = function(card) {
    return this.dom(".num1").text(card.question1);
  };

  return CardView;

})();

$(function() {
  var cardView, deck, round,
    _this = this;
  $('.card').addClass('.front');
  $(".hint").addClass("hide");
  deck = new Deck(gon.shuffled_deck, gon.shuffled_deck.length, 0);
  cardView = new CardView($(".card"));
  round = new Round(cardView);
  round.getCard(deck.ids.pop(), deck);
  $("#answer").click(function(event) {
    var guess, xhr;
    event.preventDefault();
    $('.card').addClass('flipped');
    guess = new Guess($("#guess_answer").val(), $('#guess_card_id').val());
    xhr = guess.save();
    xhr.done(function(data) {
      round.collectCard().after(round.showAnswer(data));
      return round.getCard(deck.ids.pop(), deck);
    });
    return xhr.fail(function(data) {
      return alert("Oups, something went wrong!!");
    });
  });
  return $(".love").click(function(event) {
    event.preventDefault();
    return $(".hint").removeClass("hide");
  });
});
